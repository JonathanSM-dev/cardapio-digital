/**
 * Gerenciador PWA para D'Casa & Cia Assados
 * Instala√ß√£o, Service Worker e funcionalidades offline
 */

class PWAManager {
    constructor() {
        this.deferredPrompt = null;
        this.isInstalled = false;
        this.isOnline = navigator.onLine;
        this.serviceWorker = null;
        
        this.init();
    }

    /**
     * Inicializa o gerenciador PWA
     */
    async init() {
        try {
            // Registrar Service Worker
            await this.registerServiceWorker();
            
            // Configurar eventos PWA
            this.setupPWAEvents();
            
            // Configurar detec√ß√£o de conectividade
            this.setupConnectivityDetection();
            
            // Verificar se j√° est√° instalado
            this.checkInstallationStatus();
            
            // Configurar atalhos de URL
            this.handleURLShortcuts();
            
            console.log('üöÄ PWA Manager inicializado');
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar PWA Manager:', error);
        }
    }

    /**
     * Registra o Service Worker
     */
    async registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.register('./sw.js');
                this.serviceWorker = registration;
                
                console.log('‚úÖ Service Worker registrado:', registration.scope);
                
                // Escutar atualiza√ß√µes
                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    
                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            this.showUpdateNotification();
                        }
                    });
                });
                
                // Escutar mensagens do Service Worker
                navigator.serviceWorker.addEventListener('message', (event) => {
                    this.handleServiceWorkerMessage(event);
                });
                
            } catch (error) {
                console.error('‚ùå Erro ao registrar Service Worker:', error);
            }
        } else {
            console.warn('‚ö†Ô∏è Service Worker n√£o suportado neste navegador');
        }
    }

    /**
     * Verifica crit√©rios PWA e mostra status detalhado
     */
    checkPWACriteria() {
        console.log('üîç ===============================================');
        console.log('üîç VERIFICA√á√ÉO DE CRIT√âRIOS PWA');
        console.log('üîç ===============================================');
        
        const criteria = {
            protocol: false,
            serviceWorker: false,
            manifest: false,
            beforeInstallPrompt: false,
            notInstalled: false,
            supportedBrowser: false
        };
        
        // 1. Verificar protocolo
        const isSecure = location.protocol === 'https:' || location.hostname === 'localhost';
        criteria.protocol = isSecure;
        console.log(`1Ô∏è‚É£ Protocolo seguro: ${isSecure ? '‚úÖ' : '‚ùå'} (${location.protocol})`);
        
        // 2. Verificar Service Worker
        const hasServiceWorker = 'serviceWorker' in navigator;
        criteria.serviceWorker = hasServiceWorker;
        console.log(`2Ô∏è‚É£ Service Worker suportado: ${hasServiceWorker ? '‚úÖ' : '‚ùå'}`);
        
        // 3. Verificar Manifest
        const manifestLink = document.querySelector('link[rel="manifest"]');
        criteria.manifest = !!manifestLink;
        console.log(`3Ô∏è‚É£ Manifest presente: ${manifestLink ? '‚úÖ' : '‚ùå'} (${manifestLink?.href || 'n√£o encontrado'})`);
        
        // 4. Verificar beforeinstallprompt
        criteria.beforeInstallPrompt = !!this.deferredPrompt;
        console.log(`4Ô∏è‚É£ Prompt de instala√ß√£o: ${this.deferredPrompt ? '‚úÖ' : '‚ùå'} (${this.deferredPrompt ? 'dispon√≠vel' : 'aguardando...'})`);
        
        // 5. Verificar se n√£o est√° instalado
        const isInstalled = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true;
        criteria.notInstalled = !isInstalled;
        console.log(`5Ô∏è‚É£ App n√£o instalado: ${!isInstalled ? '‚úÖ' : '‚ùå'} (${isInstalled ? 'j√° instalado' : 'pode instalar'})`);
        
        // 6. Verificar navegador suportado
        const isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
        const isEdge = /Edg/.test(navigator.userAgent);
        const supportedBrowser = isChrome || isEdge;
        criteria.supportedBrowser = supportedBrowser;
        console.log(`6Ô∏è‚É£ Navegador suportado: ${supportedBrowser ? '‚úÖ' : '‚ùå'} (${navigator.userAgent.match(/Chrome|Edg|Firefox|Safari/)?.[0] || 'desconhecido'})`);
        
        // Resumo
        const allCriteriaMet = Object.values(criteria).every(c => c);
        console.log('üîç ===============================================');
        console.log(`üìä RESULTADO: ${allCriteriaMet ? '‚úÖ TODOS CRIT√âRIOS ATENDIDOS' : '‚ùå CRIT√âRIOS FALTANTES'}`);
        
        if (!allCriteriaMet) {
            console.log('‚ùå Crit√©rios n√£o atendidos:');
            Object.entries(criteria).forEach(([key, value]) => {
                if (!value) {
                    const messages = {
                        protocol: '   ‚Ä¢ Use https:// ou localhost (n√£o file://)',
                        serviceWorker: '   ‚Ä¢ Navegador n√£o suporta Service Worker',
                        manifest: '   ‚Ä¢ Arquivo manifest.json n√£o encontrado',
                        beforeInstallPrompt: '   ‚Ä¢ Aguardando evento do navegador...',
                        notInstalled: '   ‚Ä¢ App j√° est√° instalado',
                        supportedBrowser: '   ‚Ä¢ Use Chrome, Edge ou Opera'
                    };
                    console.log(messages[key]);
                }
            });
        }
        
        console.log('üîç ===============================================');
        return criteria;
    }

    /**
     * Configura gatilhos para tentar for√ßar o prompt de instala√ß√£o
     */
    setupInstallTriggers() {
        let userInteracted = false;
        let timeOnSite = 0;
        
        // Detectar intera√ß√£o do usu√°rio
        const markUserInteraction = () => {
            if (!userInteracted) {
                userInteracted = true;
                console.log('üëÜ Intera√ß√£o do usu√°rio detectada');
                this.checkForInstallPrompt();
            }
        };
        
        // Eventos de intera√ß√£o
        ['click', 'scroll', 'keydown', 'touchstart'].forEach(event => {
            document.addEventListener(event, markUserInteraction, { once: true });
        });
        
        // Contador de tempo na p√°gina
        setInterval(() => {
            timeOnSite += 1;
            if (timeOnSite === 5) {
                console.log('‚è±Ô∏è Usu√°rio na p√°gina por 5 segundos');
                this.checkForInstallPrompt();
            }
            if (timeOnSite === 10) {
                console.log('‚è±Ô∏è Usu√°rio na p√°gina por 10 segundos');
                this.checkForInstallPrompt();
            }
            if (timeOnSite === 30) {
                console.log('‚è±Ô∏è Usu√°rio na p√°gina por 30 segundos - for√ßando verifica√ß√£o');
                this.forceInstallCheck();
            }
        }, 1000);
    }

    /**
     * Verifica se o prompt pode ser mostrado
     */
    checkForInstallPrompt() {
        if (this.deferredPrompt) {
            console.log('‚úÖ Prompt j√° dispon√≠vel, mostrando bot√£o');
            this.showInstallButton();
        } else {
            console.log('‚è≥ Prompt ainda n√£o dispon√≠vel, aguardando...');
            // Verifica crit√©rios novamente
            this.checkPWACriteria();
        }
    }

    /**
     * For√ßa verifica√ß√£o mais agressiva
     */
    forceInstallCheck() {
        console.log('üîß ===============================================');
        console.log('üîß VERIFICA√á√ÉO FOR√áADA DO PWA');
        console.log('üîß ===============================================');
        
        // Verifica se todos os crit√©rios est√£o OK
        const criteria = this.checkPWACriteria();
        
        if (!this.deferredPrompt) {
            console.log('‚ö†Ô∏è Prompt n√£o disparou automaticamente');
            console.log('üí° Poss√≠veis causas:');
            console.log('   ‚Ä¢ Chrome precisa de mais intera√ß√£o do usu√°rio');
            console.log('   ‚Ä¢ Manifest ou Service Worker com problema');
            console.log('   ‚Ä¢ Navegador j√° determinou que n√£o √© "instal√°vel"');
            console.log('   ‚Ä¢ App j√° foi rejeitado pelo usu√°rio recentemente');
            
            // Mostrar bot√£o manual mesmo sem prompt
            console.log('üîß Criando bot√£o manual de instala√ß√£o...');
            this.showManualInstallButton();
        }
        
        console.log('üîß ===============================================');
    }

    /**
     * Mostra bot√£o manual de instala√ß√£o (mesmo sem prompt autom√°tico)
     */
    showManualInstallButton() {
        // Remover bot√£o existente se houver
        const existingBtn = document.getElementById('pwa-install-btn');
        if (existingBtn) {
            existingBtn.remove();
        }
        
        // Criar bot√£o manual
        const installBtn = document.createElement('button');
        installBtn.id = 'pwa-install-btn';
        installBtn.className = 'pwa-install-btn manual';
        installBtn.innerHTML = `
            <i class="fas fa-mobile-alt"></i>
            <span>Instalar PWA</span>
        `;
        
        // Adicionar ao header-actions
        const headerActions = document.querySelector('.header-actions');
        if (headerActions) {
            headerActions.appendChild(installBtn);
            console.log('‚úÖ Bot√£o manual adicionado ao header-actions');
        }
        
        installBtn.style.display = 'flex';
        installBtn.addEventListener('click', () => {
            if (this.deferredPrompt) {
                this.installPWA();
            } else {
                this.showManualInstallInstructions();
            }
        });
        
        console.log('‚úÖ Bot√£o manual de instala√ß√£o criado');
    }

    /**
     * Mostra instru√ß√µes manuais de instala√ß√£o
     */
    showManualInstallInstructions() {
        const isChrome = /Chrome/.test(navigator.userAgent);
        const isEdge = /Edg/.test(navigator.userAgent);
        
        let instructions = '';
        
        if (isChrome) {
            instructions = `
                <h3>üì± Como Instalar no Chrome:</h3>
                <ol>
                    <li>Clique nos <strong>3 pontos</strong> (‚ãÆ) no canto superior direito</li>
                    <li>Selecione <strong>"Instalar D'Casa Assados..."</strong></li>
                    <li>Confirme clicando em <strong>"Instalar"</strong></li>
                </ol>
                <p><em>Ou pressione <strong>Ctrl+Shift+A</strong> (Windows) ou <strong>Cmd+Shift+A</strong> (Mac)</em></p>
            `;
        } else if (isEdge) {
            instructions = `
                <h3>üì± Como Instalar no Edge:</h3>
                <ol>
                    <li>Clique nos <strong>3 pontos</strong> (...) no canto superior direito</li>
                    <li>Selecione <strong>"Aplicativos"</strong> ‚Üí <strong>"Instalar este site como um aplicativo"</strong></li>
                    <li>Confirme clicando em <strong>"Instalar"</strong></li>
                </ol>
            `;
        } else {
            instructions = `
                <h3>üì± Instala√ß√£o Manual:</h3>
                <p>Para instalar este PWA, use um navegador compat√≠vel:</p>
                <ul>
                    <li><strong>Google Chrome</strong> (recomendado)</li>
                    <li><strong>Microsoft Edge</strong></li>
                    <li><strong>Opera</strong></li>
                </ul>
            `;
        }
        
        const modal = document.createElement('div');
        modal.className = 'pwa-install-modal';
        modal.innerHTML = `
            <div class="pwa-install-content">
                <div class="pwa-install-header">
                    <h2>üçñ Instalar D'Casa & Cia Assados</h2>
                    <button class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">‚úï</button>
                </div>
                <div class="pwa-install-body">
                    ${instructions}
                    <div class="pwa-benefits">
                        <h4>‚ú® Vantagens do App:</h4>
                        <ul>
                            <li>üöÄ Carregamento mais r√°pido</li>
                            <li>üì± Funciona offline</li>
                            <li>üîî Notifica√ß√µes (futuro)</li>
                            <li>üéØ Acesso direto da √°rea de trabalho</li>
                        </ul>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Remover modal ao clicar fora
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
        console.log('üì± Instru√ß√µes manuais de instala√ß√£o mostradas');
    }

    /**
     * Configura eventos PWA
     */
    setupPWAEvents() {
        // Verificar crit√©rios iniciais
        setTimeout(() => {
            this.checkPWACriteria();
        }, 1000);
        
        // Tentar for√ßar prompt ap√≥s intera√ß√£o do usu√°rio
        this.setupInstallTriggers();
        
        // Evento de instala√ß√£o
        window.addEventListener('beforeinstallprompt', (event) => {
            console.log('üíæ ===============================================');
            console.log('üíæ EVENTO beforeinstallprompt DISPARADO!');
            console.log('üíæ ===============================================');
            
            // Previne o prompt autom√°tico
            event.preventDefault();
            
            // Salva o evento para uso posterior
            this.deferredPrompt = event;
            
            // Verifica crit√©rios novamente
            this.checkPWACriteria();
            
            // Mostra bot√£o de instala√ß√£o
            this.showInstallButton();
        });

        // Evento p√≥s-instala√ß√£o
        window.addEventListener('appinstalled', (event) => {
            console.log('üéâ PWA instalado com sucesso');
            this.isInstalled = true;
            this.hideInstallButton();
            this.showInstalledNotification();
        });

        // Evento de mudan√ßa de modo de exibi√ß√£o
        window.addEventListener('resize', () => {
            this.updateDisplayMode();
        });
    }

    /**
     * Configura detec√ß√£o de conectividade
     */
    setupConnectivityDetection() {
        window.addEventListener('online', () => {
            console.log('üåê Conectado √† internet');
            this.isOnline = true;
            this.hideOfflineNotification();
            this.syncWhenOnline();
        });

        window.addEventListener('offline', () => {
            console.log('üì± Modo offline ativado');
            this.isOnline = false;
            this.showOfflineNotification();
        });
    }

    /**
     * Verifica status de instala√ß√£o
     */
    checkInstallationStatus() {
        // Verifica se est√° rodando como PWA
        if (window.matchMedia('(display-mode: standalone)').matches ||
            window.navigator.standalone === true) {
            this.isInstalled = true;
            console.log('üì± Rodando como PWA instalado');
        }
    }

    /**
     * Lida com atalhos de URL
     */
    handleURLShortcuts() {
        const urlParams = new URLSearchParams(window.location.search);
        
        // Atalho para nova ordem
        if (urlParams.get('action') === 'new-order') {
            // Limpar carrinho e focar no menu
            if (typeof cart !== 'undefined') {
                cart.length = 0;
                if (typeof updateCartDisplay === 'function') {
                    updateCartDisplay();
                }
            }
        }
        
        // Atalho para abas espec√≠ficas
        const tab = urlParams.get('tab');
        if (tab && typeof switchTab === 'function') {
            setTimeout(() => switchTab(tab), 500);
        }
    }

    /**
     * Mostra bot√£o de instala√ß√£o
     */
    showInstallButton() {
        console.log('üîß Tentando mostrar bot√£o de instala√ß√£o...');
        
        // Criar bot√£o se n√£o existir
        let installBtn = document.getElementById('pwa-install-btn');
        
        if (!installBtn) {
            console.log('üìù Criando novo bot√£o de instala√ß√£o...');
            installBtn = document.createElement('button');
            installBtn.id = 'pwa-install-btn';
            installBtn.className = 'pwa-install-btn';
            installBtn.innerHTML = `
                <i class="fas fa-download"></i>
                <span>Instalar App</span>
            `;
            
            // Adicionar ao header-actions
            const headerActions = document.querySelector('.header-actions');
            if (headerActions) {
                headerActions.appendChild(installBtn);
                console.log('‚úÖ Bot√£o adicionado ao header-actions');
            } else {
                console.error('‚ùå Container .header-actions n√£o encontrado!');
                // Fallback: adicionar ao header
                const header = document.querySelector('.header .container');
                if (header) {
                    header.appendChild(installBtn);
                    console.log('‚ö†Ô∏è Bot√£o adicionado ao header como fallback');
                } else {
                    console.error('‚ùå Header n√£o encontrado!');
                }
            }
        } else {
            console.log('‚ôªÔ∏è Bot√£o j√° existe, apenas mostrando...');
        }
        
        installBtn.style.display = 'flex';
        installBtn.addEventListener('click', () => this.installPWA());
        
        console.log('‚úÖ Bot√£o de instala√ß√£o configurado e vis√≠vel');
    }

    /**
     * Esconde bot√£o de instala√ß√£o
     */
    hideInstallButton() {
        const installBtn = document.getElementById('pwa-install-btn');
        if (installBtn) {
            installBtn.style.display = 'none';
        }
    }

    /**
     * Instala o PWA
     */
    async installPWA() {
        if (!this.deferredPrompt) {
            console.warn('‚ö†Ô∏è Prompt de instala√ß√£o n√£o dispon√≠vel');
            return;
        }

        try {
            // Mostra o prompt de instala√ß√£o
            this.deferredPrompt.prompt();
            
            // Aguarda a escolha do usu√°rio
            const { outcome } = await this.deferredPrompt.userChoice;
            
            console.log(`üì± Resultado da instala√ß√£o: ${outcome}`);
            
            if (outcome === 'accepted') {
                console.log('‚úÖ Usu√°rio aceitou instalar o PWA');
            } else {
                console.log('‚ùå Usu√°rio recusou instalar o PWA');
            }
            
            // Limpa o prompt
            this.deferredPrompt = null;
            this.hideInstallButton();
            
        } catch (error) {
            console.error('‚ùå Erro na instala√ß√£o do PWA:', error);
        }
    }

    /**
     * Mostra notifica√ß√£o de atualiza√ß√£o dispon√≠vel
     */
    showUpdateNotification() {
        const notification = document.createElement('div');
        notification.className = 'pwa-update-notification';
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-sync-alt"></i>
                <span>Nova vers√£o dispon√≠vel!</span>
                <button class="update-btn" onclick="pwaManager.updateApp()">
                    Atualizar
                </button>
                <button class="dismiss-btn" onclick="this.parentElement.parentElement.remove()">
                    ‚úï
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Remove automaticamente ap√≥s 10 segundos
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 10000);
    }

    /**
     * Atualiza o app
     */
    async updateApp() {
        if (this.serviceWorker && this.serviceWorker.waiting) {
            // Envia mensagem para o Service Worker ativar
            this.serviceWorker.waiting.postMessage({ type: 'SKIP_WAITING' });
            
            // Recarrega a p√°gina
            window.location.reload();
        }
    }

    /**
     * Mostra notifica√ß√£o de instala√ß√£o bem-sucedida
     */
    showInstalledNotification() {
        const notification = document.createElement('div');
        notification.className = 'pwa-success-notification';
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-check-circle"></i>
                <span>App instalado com sucesso!</span>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    /**
     * Mostra notifica√ß√£o offline
     */
    showOfflineNotification() {
        let notification = document.getElementById('offline-notification');
        
        if (!notification) {
            notification = document.createElement('div');
            notification.id = 'offline-notification';
            notification.className = 'pwa-offline-notification';
            notification.innerHTML = `
                <div class="notification-content">
                    <i class="fas fa-wifi"></i>
                    <span>Modo offline - Funcionalidades limitadas</span>
                </div>
            `;
            
            document.body.appendChild(notification);
        }
        
        notification.style.display = 'block';
    }

    /**
     * Esconde notifica√ß√£o offline
     */
    hideOfflineNotification() {
        const notification = document.getElementById('offline-notification');
        if (notification) {
            notification.style.display = 'none';
        }
    }

    /**
     * Sincroniza dados quando volta online
     */
    async syncWhenOnline() {
        if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
            try {
                const registration = await navigator.serviceWorker.ready;
                await registration.sync.register('background-sync-orders');
                console.log('üîÑ Sincroniza√ß√£o em background agendada');
            } catch (error) {
                console.error('‚ùå Erro ao agendar sincroniza√ß√£o:', error);
            }
        }
    }

    /**
     * Lida com mensagens do Service Worker
     */
    handleServiceWorkerMessage(event) {
        const { type, data } = event.data;
        
        switch (type) {
            case 'SYNC_COMPLETE':
                console.log('‚úÖ Sincroniza√ß√£o completa:', data);
                this.showSyncCompleteNotification();
                break;
                
            case 'CACHE_UPDATED':
                console.log('üì¶ Cache atualizado:', data);
                break;
                
            default:
                console.log('üí¨ Mensagem do SW:', type, data);
        }
    }

    /**
     * Mostra notifica√ß√£o de sincroniza√ß√£o completa
     */
    showSyncCompleteNotification() {
        const notification = document.createElement('div');
        notification.className = 'pwa-sync-notification';
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-sync-alt"></i>
                <span>Dados sincronizados!</span>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 2000);
    }

    /**
     * Atualiza modo de exibi√ß√£o
     */
    updateDisplayMode() {
        const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
        
        if (isStandalone) {
            document.body.classList.add('pwa-standalone');
        } else {
            document.body.classList.remove('pwa-standalone');
        }
    }

    /**
     * Solicita permiss√£o para notifica√ß√µes
     */
    async requestNotificationPermission() {
        if ('Notification' in window) {
            const permission = await Notification.requestPermission();
            
            if (permission === 'granted') {
                console.log('‚úÖ Permiss√£o para notifica√ß√µes concedida');
                return true;
            } else {
                console.log('‚ùå Permiss√£o para notifica√ß√µes negada');
                return false;
            }
        }
        
        return false;
    }

    /**
     * Envia notifica√ß√£o local
     */
    showLocalNotification(title, options = {}) {
        if ('Notification' in window && Notification.permission === 'granted') {
            const notification = new Notification(title, {
                icon: '/icons/icon-192x192.png',
                badge: '/icons/badge-72x72.png',
                ...options
            });
            
            // Auto-close ap√≥s 5 segundos
            setTimeout(() => notification.close(), 5000);
            
            return notification;
        }
        
        return null;
    }

    /**
     * Obt√©m informa√ß√µes do PWA
     */
    getPWAInfo() {
        return {
            isInstalled: this.isInstalled,
            isOnline: this.isOnline,
            hasServiceWorker: !!this.serviceWorker,
            canInstall: !!this.deferredPrompt,
            notificationPermission: 'Notification' in window ? Notification.permission : 'not-supported'
        };
    }

    /**
     * For√ßa atualiza√ß√£o do cache
     */
    async forceUpdateCache() {
        if (this.serviceWorker) {
            this.serviceWorker.active?.postMessage({ type: 'CLEAR_CACHE' });
            console.log('üóëÔ∏è Limpeza de cache solicitada');
        }
    }
}

// Inst√¢ncia global
window.pwaManager = new PWAManager();

// Exportar para uso em m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PWAManager;
} 